// kernel\power\main.c

/*
 * 正常suspend流程
 *	1: 将当前的wakeup_count记录下来
 *	2: 启动suspend流程
 *		2.1: 如果suspend过程中，有wakeup events，则停止suspend
 */
do {
	ret = read(&cnt, "/sys/power/wakeup_count");
	if (ret) {
		ret = write(cnt, "/sys/power/wakeup_count");
	} else
		countine;
} while (!ret);
write("mem", "/sys/power/state");


// 创建/sys/power/wakeup_count
power_attr(wakeup_count);

wakeup_count_show
	return pm_get_wakeup_count(&val, true) ? sprintf(buf, "%u\n", val) : -EINTR;
		// 等待wakeup events全部处理完
		for (;;) {
			split_counters(&cnt, &inpr);
			if (inpr == 0 || signal_pending(current))
				break;
		}
		// 返回处理完的wakeup counter
		split_counters(&cnt, &inpr);
		*count = cnt;

wakeup_count_store
	pm_save_wakeup_count(val)
		saved_count = count;	// 将处理完的wakeup events总数存放在saved_count里

suspend_devices_and_enter
	do {
		error = suspend_enter(state, &wakeup);
			*wakeup = pm_wakeup_pending();
				split_counters(&cnt, &inpr);
				/*
				 * suspend流程期间有wakeup events事件产生，则停止suspend
				 *	1: 已经处理完
				 *	2：正在处理
				 */
				ret = (cnt != saved_count || inpr > 0);
			if (*wakeup)
				error = -EBUSY;
	} while (!error && !wakeup && platform_suspend_again(state));

