/*
 * keypad这个wakeup source中断产生wake event事件，则系统不能suspend
 */

// keypad device
static struct platform_device mini2440_button_device = {
	.name		= "gpio-keys",
	.id		= -1,
	.dev		= {
		.platform_data	= &mini2440_button_data,
	}
};

// keypad driver
drivers\input\keyboard\gpio_keys.c
gpio_keys_probe
	gpio_keys_setup_key(pdev, input, ddata, button, i, child);
		isr = gpio_keys_irq_isr;
			pm_wakeup_event(bdata->input->dev.parent, 0);
				return pm_wakeup_dev_event(dev, msec, false);
					pm_wakeup_ws_event(dev->power.wakeup, msec, hard);
						wakeup_source_report_event(ws, hard);
							// wakeup event cnt++ && 根据参数是否freeze_wake
							wakeup_source_activate(ws);
								atomic_inc_return(&combined_event_count);	// wakeup event cnt++
							if (hard)
								pm_system_wakeup();
									freeze_wake();
						wakeup_source_deactivate(ws);
							atomic_add_return(MAX_IN_PROGRESS, &combined_event_count);
		devm_request_any_context_irq(dev, bdata->irq, isr, irqflags, desc, bdata); // register irq


// kernel\power\suspend.c: suspend的主体函数
suspend_enter
	*wakeup = pm_wakeup_pending();	// 最后关头check一遍有无wakeup event仍未处理，没有则进入平台的enter函数进入suspend
		split_counters(&cnt, &inpr);
		ret = (cnt != saved_count || inpr > 0);	// 仍有wakeup event没有处理
		return ret || atomic_read(&pm_abort_suspend) > 0;
	if (!(*wakeup))
		suspend_ops->enter(state);

// drivers\base\power\wakeup.c: wakeup相关的API函数
static void split_counters(unsigned int *cnt, unsigned int *inpr)
{
	unsigned int comb = atomic_read(&combined_event_count);

	*cnt = (comb >> IN_PROGRESS_BITS);	// 处理完的wakeup event数量
	*inpr = comb & MAX_IN_PROGRESS;		// 待处理中的wakeup event数量，如不为0则系统不能suspend
}

wakeup_source_activate
	atomic_inc_return(&combined_event_count);	// wakeup event增加，如数目不为零，则系统不能suspend

wakeup_source_deactivate
	atomic_add_return(MAX_IN_PROGRESS, &combined_event_count);	// wakeup events in progress减1，registered wakeup events加1。
